name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        required: true

jobs: 
  pre-release: 
    runs-on: ubuntu-latest 
    steps: 
      - uses: actions/checkout@v3
        
      - name: Get last version
        uses: actions/github-script@v6
        id: get-latest-version
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('last_version', release.name);

        # - name: Get Version
        #   id: get-version
        #   run: |
        #     LAST_VERSION=$(git tag --sort=taggerdate | tail -1)
        #     LAST_MAJOR_VERSION="${LAST_VERSION#v}"
        #     LAST_MAJOR_VERSION="${LAST_MAJOR_VERSION%%.*}"
        #     echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_OUTPUT
        #     echo "LAST_MAJOR_VERSION=$LAST_MAJOR_VERSION" >> $GITHUB_OUTPUT
        #     NEW_VERSION=${{ github.event.inputs.Version }}
        #     NEW_MAJOR_VERSION="${NEW_VERSION#v}"
        #     NEW_MAJOR_VERSION="${NEW_MAJOR_VERSION%%.*}"
        #     echo "NEW_MAJOR_VERSION=$NEW_MAJOR_VERSION" >> $GITHUB_OUTPUT
        
        - name: Config the author
          run: |
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
        
        # - name: Bump version
        #   run: npm version ${{ github.event.inputs.version }}
      
        - name: Create a pre-release
          uses: actions/github-script@v6
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            script: |
              // Generate release notes
              const notes = await github.rest.repos.generateReleaseNotes({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: ${{ github.event.inputs.version }},
                target_commitish: 'main',
                previous_tag_name: ${{ steps.get-latest-version.outputs.last_version }},
                configuration_file_path: '.github/custom_release_config.yml'
              })
              
              github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: ${{ github.event.inputs.version }},
                body: notes.body,
                draft: true
              })
